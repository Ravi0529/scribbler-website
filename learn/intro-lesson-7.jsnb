{
  "metadata": {
    "name": "Lesson 7: Document Object Model (DOM)<br>",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1  style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1 style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "<h1>Introduction to the Document Object Model (DOM): Lesson 7 of 10</h1>",
      "status": "",
      "output": "<h1>Introduction to the Document Object Model (DOM): Lesson 7 of 10</h1>",
      "type": "html"
    },
    {
      "code": "<h2> Overview</h2>\n\nThe Document Object Model (DOM) is a programming interface for web documents. It represents the structure of HTML  documents as a tree-like structure, where each node represents a part of the document.\n\n<h3>What are DOM Elements?</h3>\nDOM elements are the individual components or parts of an HTML document. Each HTML element, such as `&lt;div&gt;`, `&lt;p&gt;`, `&lt;h1&gt;`, `&lt;img&gt;`, etc., is considered a DOM element. These elements can contain attributes (like id, class, src, href, etc.) and may also contain text or other elements as their children.\n<h3>Characteristics of DOM Elements</h3>\n<ol>\n<li><b>Unique Identifier</b>: Each DOM element can have a unique identifier known as the `id` attribute. This identifier should be unique within the entire document.\n</li>\n<li><b>Classes</b>: DOM elements can belong to one or more classes, which are specified using the `class` attribute. Classes are often used to group similar elements together for styling or JavaScript manipulation.\n</li>\n<li><b>Attributes</b>: Apart from `id` and `class`, DOM elements can have various other attributes depending on the element type. For example, an `&lt;img&gt;` element might have a `src` attribute to specify the image file path, or an `&lt;a&gt;` element might have an `href` attribute to specify the URL it links to.\n</li>\n<li><b>Hierarchy</b>: DOM elements are organized in a hierarchical structure, where some elements contain other elements. For example, a `&lt;div&gt;` element might contain several `&lt;p&gt;` elements, and each `&lt;p&gt;` element might contain text or other elements.\n</li>\n<li><b>Events</b>: DOM elements can respond to user interactions, such as clicks, mouse movements, keyboard input, etc., through event handling. JavaScript allows you to attach event listeners to DOM elements to execute code in response to these interactions.\n</ol>",
      "status": "",
      "output": "<h2> Overview</h2>\n\nThe Document Object Model (DOM) is a programming interface for web documents. It represents the structure of HTML  documents as a tree-like structure, where each node represents a part of the document.\n\n<h3>What are DOM Elements?</h3>\nDOM elements are the individual components or parts of an HTML document. Each HTML element, such as `&lt;div&gt;`, `&lt;p&gt;`, `&lt;h1&gt;`, `&lt;img&gt;`, etc., is considered a DOM element. These elements can contain attributes (like id, class, src, href, etc.) and may also contain text or other elements as their children.\n<h3>Characteristics of DOM Elements</h3>\n<ol>\n<li><b>Unique Identifier</b>: Each DOM element can have a unique identifier known as the `id` attribute. This identifier should be unique within the entire document.\n</li>\n<li><b>Classes</b>: DOM elements can belong to one or more classes, which are specified using the `class` attribute. Classes are often used to group similar elements together for styling or JavaScript manipulation.\n</li>\n<li><b>Attributes</b>: Apart from `id` and `class`, DOM elements can have various other attributes depending on the element type. For example, an `&lt;img&gt;` element might have a `src` attribute to specify the image file path, or an `&lt;a&gt;` element might have an `href` attribute to specify the URL it links to.\n</li>\n<li><b>Hierarchy</b>: DOM elements are organized in a hierarchical structure, where some elements contain other elements. For example, a `&lt;div&gt;` element might contain several `&lt;p&gt;` elements, and each `&lt;p&gt;` element might contain text or other elements.\n</li>\n<li><b>Events</b>: DOM elements can respond to user interactions, such as clicks, mouse movements, keyboard input, etc., through event handling. JavaScript allows you to attach event listeners to DOM elements to execute code in response to these interactions.\n</li></ol>",
      "type": "html"
    },
    {
      "code": "//>html\n<div >\n  <h1>Example of DOM Elements</h1>\n    <p>This is a paragraph. Please change the content and press play button to see the output.</p>\n    <img style=\"width:100px\" src=\"https://app.scribbler.live/images/logo2.png\" alt=\"Logo\">\n    <a href=\"https://scribbler.live\">My Site</a>\n</div>\n",
      "status": "[1]<br><span style=\"font-size:8px\">15ms<span></span></span>",
      "output": "\n<div>\n  <h1>Example of DOM Elements</h1>\n    <p>This is a paragraph. Please change the content and press play button to see the output.</p>\n    <img style=\"width:100px\" src=\"https://app.scribbler.live/images/logo2.png\" alt=\"Logo\">\n    <a href=\"https://scribbler.live\">My Site</a>\n</div>\n <br>",
      "type": "code"
    },
    {
      "code": "<b>In this example:</b>\n<ul>\n<li>The `&lt;div&gt;` element  is a DOM element. The name \"div\" stands for \"division\" or \"divider.\"</li>\n<li>The `&lt;h1&gt;` (heading),  `&lt;p&gt;` (paragraph), `&lt;img&gt;` (image), and `&lt;a&gt;` (link)  elements inside the `&lt;div&gt;` are also DOM elements.</li>\n<li>Each of these elements can be manipulated using JavaScript for various purposes like changing content, styling, adding behavior, etc.</li>\n</ul>\nUnderstanding DOM elements and how to manipulate them is crucial for web development, as it allows developers to create dynamic and interactive web pages. We will discuss on how to use JavaScript to access and manipulate DOM elements. Details of styling and other aspects are beyond the scope of this introductory course.\n<br>\n  Note: Every HTML cell in Scribbler uses DOM elements. You can double click any of these HTML cells to see the code for the elements.",
      "status": "",
      "output": "<b>In this example:</b>\n<ul>\n<li>The `&lt;div&gt;` element  is a DOM element. The name \"div\" stands for \"division\" or \"divider.\"</li>\n<li>The `&lt;h1&gt;` (heading),  `&lt;p&gt;` (paragraph), `&lt;img&gt;` (image), and `&lt;a&gt;` (link)  elements inside the `&lt;div&gt;` are also DOM elements.</li>\n<li>Each of these elements can be manipulated using JavaScript for various purposes like changing content, styling, adding behavior, etc.</li>\n</ul>\nUnderstanding DOM elements and how to manipulate them is crucial for web development, as it allows developers to create dynamic and interactive web pages. We will discuss on how to use JavaScript to access and manipulate DOM elements. Details of styling and other aspects are beyond the scope of this introductory course.\n<br>\n  Note: Every HTML cell in Scribbler uses DOM elements. You can double click any of these HTML cells to see the code for the elements.",
      "type": "html"
    },
    {
      "code": "<h2>Selecting DOM Elements</h2>\nIn JavaScript, accessing DOM elements is a fundamental part of web development, enabling developers to interact with and manipulate the content and structure of web pages dynamically. One of the most commonly used methods to select DOM elements is `getElementById()`, which allows developers to target specific elements by their unique ID attribute.\n<br>\n <b>getElementById:</b> This method retrieves an element from the DOM based on its unique ID attribute. IDs are unique identifiers assigned to HTML elements, and each ID should be unique within the entire document.\n<pre>\n   // Example usage of getElementById\nvar element = document.getElementById('myElementId');\n</pre>\n- In the example above, getElementById() is called with the argument 'myElementId', which is the ID of the element we want to select.\n<br> - The method returns a reference to the element with the specified ID, which is stored in the variable element.\n<br>- If no element with the specified ID is found, the method returns null.\n",
      "status": "",
      "output": "<h2>Selecting DOM Elements</h2>\nIn JavaScript, accessing DOM elements is a fundamental part of web development, enabling developers to interact with and manipulate the content and structure of web pages dynamically. One of the most commonly used methods to select DOM elements is `getElementById()`, which allows developers to target specific elements by their unique ID attribute.\n<br>\n <b>getElementById:</b> This method retrieves an element from the DOM based on its unique ID attribute. IDs are unique identifiers assigned to HTML elements, and each ID should be unique within the entire document.\n<pre>   // Example usage of getElementById\nvar element = document.getElementById('myElementId');\n</pre>\n- In the example above, getElementById() is called with the argument 'myElementId', which is the ID of the element we want to select.\n<br> - The method returns a reference to the element with the specified ID, which is stored in the variable element.\n<br>- If no element with the specified ID is found, the method returns null.\n",
      "type": "html"
    },
    {
      "code": "<h2>Manipulating DOM Elements</h2>\nOnce you have selected DOM elements, you can manipulate them in various ways using JavaScript:\n\n<ol>\n  <li><b>Accessing Content</b>: You can access the content of an element using the `innerHTML` property.\n<pre>\nlet element_content=element.innerHTML;\n\n</pre>\n\n</li>\n<li><b>Changing Content</b>: You can change the content of an element using the `innerHTML` property.\n<pre>\nelement.innerHTML = 'New content';\n\n</pre>\n\nThis changes the content inside an element.This can also be written like this: \n <pre>\nelement['innerHTML'] = 'New content'; \n</pre>\nRemember objects from lesson 3?\n</li>\n<li><b>Changing Styles</b>: You can change the CSS styles of an element using the `style` property.\n<pre>\nelement.style.color = 'red';\n</pre>\nThis changes the font color of the element.\n</li>\n\n<li><b>Creating New Elements</b>: You can create new elements using the `createElement` method and append them to the document.\n<pre>\nvar newElement = document.createElement('div');\nelement.appendChild(newElement);\n</pre>\nThis adds a new element inside the element.\n</li>\n</ol>\nThere are several other parameters that can be changed using JavaScript. Including: height, width, background-color, src (for images), and href (for links).\n",
      "status": "",
      "output": "<h2>Manipulating DOM Elements</h2>\nOnce you have selected DOM elements, you can manipulate them in various ways using JavaScript:\n\n<ol>\n  <li><b>Accessing Content</b>: You can access the content of an element using the `innerHTML` property.\n<pre>let element_content=element.innerHTML;\n\n</pre>\n\n</li>\n<li><b>Changing Content</b>: You can change the content of an element using the `innerHTML` property.\n<pre>element.innerHTML = 'New content';\n\n</pre>\n\nThis changes the content inside an element.This can also be written like this: \n <pre>element['innerHTML'] = 'New content'; \n</pre>\nRemember objects from lesson 3?\n</li>\n<li><b>Changing Styles</b>: You can change the CSS styles of an element using the `style` property.\n<pre>element.style.color = 'red';\n</pre>\nThis changes the font color of the element.\n</li>\n\n<li><b>Creating New Elements</b>: You can create new elements using the `createElement` method and append them to the document.\n<pre>var newElement = document.createElement('div');\nelement.appendChild(newElement);\n</pre>\nThis adds a new element inside the element.\n</li>\n</ol>\nThere are several other parameters that can be changed using JavaScript. Including: height, width, background-color, src (for images), and href (for links).\n",
      "type": "html"
    },
    {
      "code": "<h2>Experiment: Changing Text and Color </h2>\n\nLet's create an example where we change the text and color of an element. In the next cell there is a div with a short text. The id of the element is \"my-div\".\nusing the getElementById let us acces this element in JavaScript and manipluate this element. Experiment and play the cells after the next one to see how to manipulate the cells.\n<br>\n  <br><b>Double click the next text to see the code and also change the text. Press play button after changing </b>",
      "status": "",
      "output": "<h2>Experiment: Changing Text and Color </h2>\n\nLet's create an example where we change the text and color of an element. In the next cell there is a div with a short text. The id of the element is \"my-div\".\nusing the getElementById let us acces this element in JavaScript and manipluate this element. Experiment and play the cells after the next one to see how to manipulate the cells.\n<br>\n  <br><b>Double click the next text to see the code and also change the text. Press play button after changing </b>",
      "type": "html"
    },
    {
      "code": "//>html\n<div id=\"my-div\" style=\"border:thick solid blue;padding:10px\">\n  This is a sample element. \n</div>",
      "status": "[2]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "\n<div id=\"my-div\" style=\"border:thick solid blue;padding:10px\">\n  This is a sample element. \n</div> <br>",
      "type": "code"
    },
    {
      "code": "//Get the element\nlet element = document.getElementById(\"my-div\");\n//Now let us alert it\nlet elementContent=element.innerHTML;\nscrib.show(elementContent);",
      "status": "[7]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "\n  This is a sample element. Double click me to see the code and change text.\n <br>",
      "type": "code"
    },
    {
      "code": "Why don't you change the content of the element and see if takes affect?",
      "status": "",
      "output": "Why don't you change the content of the element and see if takes affect?",
      "type": "html"
    },
    {
      "code": "//Get the element\nlet element = document.getElementById(\"my-div\");\nlet newContent=\"This is new content\";\n//Now change the content of the element below by assigning this value to the innerHTML of the element.\n\n//Write code above and press play button.",
      "status": "[1]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "Let us change the font color using element.style.color",
      "status": "",
      "output": "Let us change the font color using element.style.color",
      "type": "html"
    },
    {
      "code": "//Get the element\nlet element = document.getElementById(\"my-div\");\n//Now change the font color of the element  to 'red'\n\n//Write code above and press play button.You can check if the color changed by scrolling up.",
      "status": "[2]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "Let us change the background color using element.style.['background-color']. \nNote: element.style.background-color does not work because of the hiphen `-` ",
      "status": "",
      "output": "Let us change the background color using element.style.['background-color']. \nNote: element.style.background-color does not work because of the hiphen `-` ",
      "type": "html"
    },
    {
      "code": "//Get the element\nlet element = document.getElementById(\"my-div\");\n//Now change the background color of the element  to 'green'\n\n//Write code above and press play button. You can check if the color changed by scrolling up.",
      "status": "[5]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "In the experiment below, let us create a new element of image type and append it to the above \"my-div\" element.",
      "status": "",
      "output": "In the experiment below, let us create a new element of image type and append it to the above \"my-div\" element.",
      "type": "html"
    },
    {
      "code": "//Get the element\nlet element = document.getElementById(\"my-div\");\n//Create new element\nlet newElement = document.createElement('img');\n//Assign a source for the image\nnewElement.src='https://app.scribbler.live/images/logo2.png';\n//Now append this to the \"my-div\" element using appendChild and see if it takes affect.\n",
      "status": "[19]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "https://app.scribbler.live/images/logo2.png <br>",
      "type": "code"
    },
    {
      "code": "<h2>Interactive Elements</h2>\nThere are some elements that are specifically designed for interactive with the user. There include: input, button, and select. Input DOM helps enter various types of inputs including text, password, file, checkbox etc. Buttons allow users to click and initiate an activity. Select element allows users to select a value from a drop down.\n<br>In the example below we will look at accessing the input value from a text. In the next lesson we will look at buttons. You can learn about other input types and DOMs once you master these.\n<br>The next cell has a text input with the id \"my-input\". Enter a value in it. We will access the value in the code in the subsequent cell. The value of an input element is accessed through `element.value`.",
      "status": "",
      "output": "<h2>Interactive Elements</h2>\nThere are some elements that are specifically designed for interactive with the user. There include: input, button, and select. Input DOM helps enter various types of inputs including text, password, file, checkbox etc. Buttons allow users to click and initiate an activity. Select element allows users to select a value from a drop down.\n<br>In the example below we will look at accessing the input value from a text. In the next lesson we will look at buttons. You can learn about other input types and DOMs once you master these.\n<br>The next cell has a text input with the id \"my-input\". Enter a value in it. We will access the value in the code in the subsequent cell. The value of an input element is accessed through `element.value`.",
      "type": "html"
    },
    {
      "code": "//>html\nEnter a text below and click the play button of the next cell. \n<input type='text' id='my-input'>\nYou can change the input and press play button again.",
      "status": "[3]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "\nEnter a text below and click the play button of the next cell. \n<input type=\"text\" id=\"my-input\">\nYou can change the input and press play button again. <br>",
      "type": "code"
    },
    {
      "code": "let input=document.getElementById(\"my-input\");\nscrib.show(\"My input is:\",input.value)",
      "status": "[6]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "My input is:  <br>",
      "type": "code"
    },
    {
      "code": "<h2>Summary</h2>\nDOM manipulation is a fundamental aspect of web development with JavaScript. Understanding how to select and manipulate DOM elements allows you to create dynamic and interactive web pages. Practice manipulating DOM elements to become proficient in web development. In the next lesson we will go into details of another aspect of accessing web development called events.",
      "status": "",
      "output": "<h2>Summary</h2>\nDOM manipulation is a fundamental aspect of web development with JavaScript. Understanding how to select and manipulate DOM elements allows you to create dynamic and interactive web pages. Practice manipulating DOM elements to become proficient in web development. In the next lesson we will go into details of another aspect of accessing web development called events.",
      "type": "html"
    },
    {
      "code": "<a href=\"https://discord.com/invite/uxNSsWunwU\" target=\"_blank\" role=\"button\" >Join our Discord Server</a>",
      "status": "",
      "output": "<a href=\"https://discord.com/invite/uxNSsWunwU\" target=\"_blank\" role=\"button\">Join our Discord Server</a>",
      "type": "html"
    },
    {
      "code": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-8.jsnb\" target=\"_blank\">Lesson 8: Events and Event Handling</a></li>\n  \n  </ul>",
      "status": "",
      "output": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-8.jsnb\" target=\"_blank\">Lesson 8: Events and Event Handling</a></li>\n  \n  </ul>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}